// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: data_model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DynStacking.DataModel {

  /// <summary>Holder for reflection information generated from data_model.proto</summary>
  public static partial class DataModelReflection {

    #region Descriptor
    /// <summary>File descriptor for data_model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBkYXRhX21vZGVsLnByb3RvEhVEeW5TdGFja2luZy5EYXRhTW9kZWwihAEK",
            "BUJsb2NrEgoKAklkGAEgASgFEjEKB1JlbGVhc2UYAiABKAsyIC5EeW5TdGFj",
            "a2luZy5EYXRhTW9kZWwuVGltZVN0YW1wEi0KA0R1ZRgDIAEoCzIgLkR5blN0",
            "YWNraW5nLkRhdGFNb2RlbC5UaW1lU3RhbXASDQoFUmVhZHkYBCABKAgiugEK",
            "BUNyYW5lEgoKAklkGAEgASgFEhIKCkxvY2F0aW9uSWQYAiABKAUSKgoETG9h",
            "ZBgDIAEoCzIcLkR5blN0YWNraW5nLkRhdGFNb2RlbC5CbG9jaxI2CghTY2hl",
            "ZHVsZRgEIAEoCzIkLkR5blN0YWNraW5nLkRhdGFNb2RlbC5DcmFuZVNjaGVk",
            "dWxlEhYKDkdpcmRlclBvc2l0aW9uGAUgASgBEhUKDUhvaXN0UG9zaXRpb24Y",
            "BiABKAEiUgoJQ3JhbmVNb3ZlEg8KB0Jsb2NrSWQYASABKAUSEAoIU291cmNl",
            "SWQYAiABKAUSEAoIVGFyZ2V0SWQYAyABKAUSEAoIU2VxdWVuY2UYBCABKAUi",
            "VAoNQ3JhbmVTY2hlZHVsZRIvCgVNb3ZlcxgBIAMoCzIgLkR5blN0YWNraW5n",
            "LkRhdGFNb2RlbC5DcmFuZU1vdmUSEgoKU2VxdWVuY2VOchgCIAEoBSJSCghI",
            "YW5kb3ZlchIKCgJJZBgBIAEoBRINCgVSZWFkeRgCIAEoCBIrCgVCbG9jaxgD",
            "IAEoCzIcLkR5blN0YWNraW5nLkRhdGFNb2RlbC5CbG9jayL9AQoLUGVyZm9y",
            "bWFuY2USGgoSQ3JhbmVNYW5pcHVsYXRpb25zGAEgASgFEhgKEFNlcnZpY2VM",
            "ZXZlbE1lYW4YAiABKAESFAoMTGVhZFRpbWVNZWFuGAMgASgBEhcKD0RlbGl2",
            "ZXJlZEJsb2NrcxgEIAEoBRIZChFUb3RhbEJsb2Nrc09uVGltZRgFIAEoBRIa",
            "ChJCbG9ja2VkQXJyaXZhbFRpbWUYBiABKAESFQoNVGFyZGluZXNzTWVhbhgH",
            "IAEoARIdChVCdWZmZXJVdGlsaXphdGlvbk1lYW4YCCABKAESHAoUQ3JhbmVV",
            "dGlsaXphdGlvbk1lYW4YCSABKAEiWQoFU3RhY2sSCgoCSWQYASABKAUSEQoJ",
            "TWF4SGVpZ2h0GAIgASgFEjEKC0JvdHRvbVRvVG9wGAMgAygLMhwuRHluU3Rh",
            "Y2tpbmcuRGF0YU1vZGVsLkJsb2NrIiEKCVRpbWVTdGFtcBIUCgxNaWxsaVNl",
            "Y29uZHMYASABKAMibQoNVW5jZXJ0YWludGllcxIcChBBcnJpdmFsSW50ZXJ2",
            "YWxzGAEgAygBQgIQABIaCg5DcmFuZU1vdmVUaW1lcxgCIAMoAUICEAASIgoW",
            "SGFuZG92ZXJSZWFkeUludGVydmFscxgDIAMoAUICEAAi6AIKBVdvcmxkEi0K",
            "A05vdxgBIAEoCzIgLkR5blN0YWNraW5nLkRhdGFNb2RlbC5UaW1lU3RhbXAS",
            "MAoKUHJvZHVjdGlvbhgCIAEoCzIcLkR5blN0YWNraW5nLkRhdGFNb2RlbC5T",
            "dGFjaxItCgdCdWZmZXJzGAMgAygLMhwuRHluU3RhY2tpbmcuRGF0YU1vZGVs",
            "LlN0YWNrEjEKCEhhbmRvdmVyGAQgASgLMh8uRHluU3RhY2tpbmcuRGF0YU1v",
            "ZGVsLkhhbmRvdmVyEisKBUNyYW5lGAUgASgLMhwuRHluU3RhY2tpbmcuRGF0",
            "YU1vZGVsLkNyYW5lEjAKBEtQSXMYBiABKAsyIi5EeW5TdGFja2luZy5EYXRh",
            "TW9kZWwuUGVyZm9ybWFuY2USPQoPT2JzZXJ2YXRpb25EYXRhGAcgASgLMiQu",
            "RHluU3RhY2tpbmcuRGF0YU1vZGVsLlVuY2VydGFpbnRpZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.Block), global::DynStacking.DataModel.Block.Parser, new[]{ "Id", "Release", "Due", "Ready" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.Crane), global::DynStacking.DataModel.Crane.Parser, new[]{ "Id", "LocationId", "Load", "Schedule", "GirderPosition", "HoistPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.CraneMove), global::DynStacking.DataModel.CraneMove.Parser, new[]{ "BlockId", "SourceId", "TargetId", "Sequence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.CraneSchedule), global::DynStacking.DataModel.CraneSchedule.Parser, new[]{ "Moves", "SequenceNr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.Handover), global::DynStacking.DataModel.Handover.Parser, new[]{ "Id", "Ready", "Block" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.Performance), global::DynStacking.DataModel.Performance.Parser, new[]{ "CraneManipulations", "ServiceLevelMean", "LeadTimeMean", "DeliveredBlocks", "TotalBlocksOnTime", "BlockedArrivalTime", "TardinessMean", "BufferUtilizationMean", "CraneUtilizationMean" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.Stack), global::DynStacking.DataModel.Stack.Parser, new[]{ "Id", "MaxHeight", "BottomToTop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.TimeStamp), global::DynStacking.DataModel.TimeStamp.Parser, new[]{ "MilliSeconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.Uncertainties), global::DynStacking.DataModel.Uncertainties.Parser, new[]{ "ArrivalIntervals", "CraneMoveTimes", "HandoverReadyIntervals" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynStacking.DataModel.World), global::DynStacking.DataModel.World.Parser, new[]{ "Now", "Production", "Buffers", "Handover", "Crane", "KPIs", "ObservationData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      id_ = other.id_;
      release_ = other.release_ != null ? other.release_.Clone() : null;
      due_ = other.due_ != null ? other.due_.Clone() : null;
      ready_ = other.ready_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Release" field.</summary>
    public const int ReleaseFieldNumber = 2;
    private global::DynStacking.DataModel.TimeStamp release_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.TimeStamp Release {
      get { return release_; }
      set {
        release_ = value;
      }
    }

    /// <summary>Field number for the "Due" field.</summary>
    public const int DueFieldNumber = 3;
    private global::DynStacking.DataModel.TimeStamp due_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.TimeStamp Due {
      get { return due_; }
      set {
        due_ = value;
      }
    }

    /// <summary>Field number for the "Ready" field.</summary>
    public const int ReadyFieldNumber = 4;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Release, other.Release)) return false;
      if (!object.Equals(Due, other.Due)) return false;
      if (Ready != other.Ready) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (release_ != null) hash ^= Release.GetHashCode();
      if (due_ != null) hash ^= Due.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (release_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Release);
      }
      if (due_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Due);
      }
      if (Ready != false) {
        output.WriteRawTag(32);
        output.WriteBool(Ready);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (release_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Release);
      }
      if (due_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Due);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.release_ != null) {
        if (release_ == null) {
          Release = new global::DynStacking.DataModel.TimeStamp();
        }
        Release.MergeFrom(other.Release);
      }
      if (other.due_ != null) {
        if (due_ == null) {
          Due = new global::DynStacking.DataModel.TimeStamp();
        }
        Due.MergeFrom(other.Due);
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (release_ == null) {
              Release = new global::DynStacking.DataModel.TimeStamp();
            }
            input.ReadMessage(Release);
            break;
          }
          case 26: {
            if (due_ == null) {
              Due = new global::DynStacking.DataModel.TimeStamp();
            }
            input.ReadMessage(Due);
            break;
          }
          case 32: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Crane : pb::IMessage<Crane> {
    private static readonly pb::MessageParser<Crane> _parser = new pb::MessageParser<Crane>(() => new Crane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Crane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Crane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Crane(Crane other) : this() {
      id_ = other.id_;
      locationId_ = other.locationId_;
      load_ = other.load_ != null ? other.load_.Clone() : null;
      schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
      girderPosition_ = other.girderPosition_;
      hoistPosition_ = other.hoistPosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Crane Clone() {
      return new Crane(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "LocationId" field.</summary>
    public const int LocationIdFieldNumber = 2;
    private int locationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { return locationId_; }
      set {
        locationId_ = value;
      }
    }

    /// <summary>Field number for the "Load" field.</summary>
    public const int LoadFieldNumber = 3;
    private global::DynStacking.DataModel.Block load_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.Block Load {
      get { return load_; }
      set {
        load_ = value;
      }
    }

    /// <summary>Field number for the "Schedule" field.</summary>
    public const int ScheduleFieldNumber = 4;
    private global::DynStacking.DataModel.CraneSchedule schedule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.CraneSchedule Schedule {
      get { return schedule_; }
      set {
        schedule_ = value;
      }
    }

    /// <summary>Field number for the "GirderPosition" field.</summary>
    public const int GirderPositionFieldNumber = 5;
    private double girderPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GirderPosition {
      get { return girderPosition_; }
      set {
        girderPosition_ = value;
      }
    }

    /// <summary>Field number for the "HoistPosition" field.</summary>
    public const int HoistPositionFieldNumber = 6;
    private double hoistPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HoistPosition {
      get { return hoistPosition_; }
      set {
        hoistPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Crane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Crane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LocationId != other.LocationId) return false;
      if (!object.Equals(Load, other.Load)) return false;
      if (!object.Equals(Schedule, other.Schedule)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GirderPosition, other.GirderPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HoistPosition, other.HoistPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (LocationId != 0) hash ^= LocationId.GetHashCode();
      if (load_ != null) hash ^= Load.GetHashCode();
      if (schedule_ != null) hash ^= Schedule.GetHashCode();
      if (GirderPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GirderPosition);
      if (HoistPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HoistPosition);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (LocationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LocationId);
      }
      if (load_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Load);
      }
      if (schedule_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Schedule);
      }
      if (GirderPosition != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(GirderPosition);
      }
      if (HoistPosition != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(HoistPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (LocationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      if (load_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Load);
      }
      if (schedule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
      }
      if (GirderPosition != 0D) {
        size += 1 + 8;
      }
      if (HoistPosition != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Crane other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.LocationId != 0) {
        LocationId = other.LocationId;
      }
      if (other.load_ != null) {
        if (load_ == null) {
          Load = new global::DynStacking.DataModel.Block();
        }
        Load.MergeFrom(other.Load);
      }
      if (other.schedule_ != null) {
        if (schedule_ == null) {
          Schedule = new global::DynStacking.DataModel.CraneSchedule();
        }
        Schedule.MergeFrom(other.Schedule);
      }
      if (other.GirderPosition != 0D) {
        GirderPosition = other.GirderPosition;
      }
      if (other.HoistPosition != 0D) {
        HoistPosition = other.HoistPosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            LocationId = input.ReadInt32();
            break;
          }
          case 26: {
            if (load_ == null) {
              Load = new global::DynStacking.DataModel.Block();
            }
            input.ReadMessage(Load);
            break;
          }
          case 34: {
            if (schedule_ == null) {
              Schedule = new global::DynStacking.DataModel.CraneSchedule();
            }
            input.ReadMessage(Schedule);
            break;
          }
          case 41: {
            GirderPosition = input.ReadDouble();
            break;
          }
          case 49: {
            HoistPosition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CraneMove : pb::IMessage<CraneMove> {
    private static readonly pb::MessageParser<CraneMove> _parser = new pb::MessageParser<CraneMove>(() => new CraneMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CraneMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CraneMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CraneMove(CraneMove other) : this() {
      blockId_ = other.blockId_;
      sourceId_ = other.sourceId_;
      targetId_ = other.targetId_;
      sequence_ = other.sequence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CraneMove Clone() {
      return new CraneMove(this);
    }

    /// <summary>Field number for the "BlockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private int blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "SourceId" field.</summary>
    public const int SourceIdFieldNumber = 2;
    private int sourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceId {
      get { return sourceId_; }
      set {
        sourceId_ = value;
      }
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 3;
    private int targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "Sequence" field.</summary>
    public const int SequenceFieldNumber = 4;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CraneMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CraneMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId != other.BlockId) return false;
      if (SourceId != other.SourceId) return false;
      if (TargetId != other.TargetId) return false;
      if (Sequence != other.Sequence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId != 0) hash ^= BlockId.GetHashCode();
      if (SourceId != 0) hash ^= SourceId.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockId);
      }
      if (SourceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceId);
      }
      if (TargetId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetId);
      }
      if (Sequence != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockId);
      }
      if (SourceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceId);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CraneMove other) {
      if (other == null) {
        return;
      }
      if (other.BlockId != 0) {
        BlockId = other.BlockId;
      }
      if (other.SourceId != 0) {
        SourceId = other.SourceId;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockId = input.ReadInt32();
            break;
          }
          case 16: {
            SourceId = input.ReadInt32();
            break;
          }
          case 24: {
            TargetId = input.ReadInt32();
            break;
          }
          case 32: {
            Sequence = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CraneSchedule : pb::IMessage<CraneSchedule> {
    private static readonly pb::MessageParser<CraneSchedule> _parser = new pb::MessageParser<CraneSchedule>(() => new CraneSchedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CraneSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CraneSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CraneSchedule(CraneSchedule other) : this() {
      moves_ = other.moves_.Clone();
      sequenceNr_ = other.sequenceNr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CraneSchedule Clone() {
      return new CraneSchedule(this);
    }

    /// <summary>Field number for the "Moves" field.</summary>
    public const int MovesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DynStacking.DataModel.CraneMove> _repeated_moves_codec
        = pb::FieldCodec.ForMessage(10, global::DynStacking.DataModel.CraneMove.Parser);
    private readonly pbc::RepeatedField<global::DynStacking.DataModel.CraneMove> moves_ = new pbc::RepeatedField<global::DynStacking.DataModel.CraneMove>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DynStacking.DataModel.CraneMove> Moves {
      get { return moves_; }
    }

    /// <summary>Field number for the "SequenceNr" field.</summary>
    public const int SequenceNrFieldNumber = 2;
    private int sequenceNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNr {
      get { return sequenceNr_; }
      set {
        sequenceNr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CraneSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CraneSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!moves_.Equals(other.moves_)) return false;
      if (SequenceNr != other.SequenceNr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= moves_.GetHashCode();
      if (SequenceNr != 0) hash ^= SequenceNr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      moves_.WriteTo(output, _repeated_moves_codec);
      if (SequenceNr != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceNr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += moves_.CalculateSize(_repeated_moves_codec);
      if (SequenceNr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CraneSchedule other) {
      if (other == null) {
        return;
      }
      moves_.Add(other.moves_);
      if (other.SequenceNr != 0) {
        SequenceNr = other.SequenceNr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            moves_.AddEntriesFrom(input, _repeated_moves_codec);
            break;
          }
          case 16: {
            SequenceNr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Handover : pb::IMessage<Handover> {
    private static readonly pb::MessageParser<Handover> _parser = new pb::MessageParser<Handover>(() => new Handover());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Handover> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handover() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handover(Handover other) : this() {
      id_ = other.id_;
      ready_ = other.ready_;
      block_ = other.block_ != null ? other.block_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handover Clone() {
      return new Handover(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Ready" field.</summary>
    public const int ReadyFieldNumber = 2;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    /// <summary>Field number for the "Block" field.</summary>
    public const int BlockFieldNumber = 3;
    private global::DynStacking.DataModel.Block block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.Block Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Handover);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Handover other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ready != other.Ready) return false;
      if (!object.Equals(Block, other.Block)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (block_ != null) hash ^= Block.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Ready != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ready);
      }
      if (block_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Handover other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          Block = new global::DynStacking.DataModel.Block();
        }
        Block.MergeFrom(other.Block);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Ready = input.ReadBool();
            break;
          }
          case 26: {
            if (block_ == null) {
              Block = new global::DynStacking.DataModel.Block();
            }
            input.ReadMessage(Block);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Performance : pb::IMessage<Performance> {
    private static readonly pb::MessageParser<Performance> _parser = new pb::MessageParser<Performance>(() => new Performance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Performance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Performance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Performance(Performance other) : this() {
      craneManipulations_ = other.craneManipulations_;
      serviceLevelMean_ = other.serviceLevelMean_;
      leadTimeMean_ = other.leadTimeMean_;
      deliveredBlocks_ = other.deliveredBlocks_;
      totalBlocksOnTime_ = other.totalBlocksOnTime_;
      blockedArrivalTime_ = other.blockedArrivalTime_;
      tardinessMean_ = other.tardinessMean_;
      bufferUtilizationMean_ = other.bufferUtilizationMean_;
      craneUtilizationMean_ = other.craneUtilizationMean_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Performance Clone() {
      return new Performance(this);
    }

    /// <summary>Field number for the "CraneManipulations" field.</summary>
    public const int CraneManipulationsFieldNumber = 1;
    private int craneManipulations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CraneManipulations {
      get { return craneManipulations_; }
      set {
        craneManipulations_ = value;
      }
    }

    /// <summary>Field number for the "ServiceLevelMean" field.</summary>
    public const int ServiceLevelMeanFieldNumber = 2;
    private double serviceLevelMean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ServiceLevelMean {
      get { return serviceLevelMean_; }
      set {
        serviceLevelMean_ = value;
      }
    }

    /// <summary>Field number for the "LeadTimeMean" field.</summary>
    public const int LeadTimeMeanFieldNumber = 3;
    private double leadTimeMean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeadTimeMean {
      get { return leadTimeMean_; }
      set {
        leadTimeMean_ = value;
      }
    }

    /// <summary>Field number for the "DeliveredBlocks" field.</summary>
    public const int DeliveredBlocksFieldNumber = 4;
    private int deliveredBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeliveredBlocks {
      get { return deliveredBlocks_; }
      set {
        deliveredBlocks_ = value;
      }
    }

    /// <summary>Field number for the "TotalBlocksOnTime" field.</summary>
    public const int TotalBlocksOnTimeFieldNumber = 5;
    private int totalBlocksOnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalBlocksOnTime {
      get { return totalBlocksOnTime_; }
      set {
        totalBlocksOnTime_ = value;
      }
    }

    /// <summary>Field number for the "BlockedArrivalTime" field.</summary>
    public const int BlockedArrivalTimeFieldNumber = 6;
    private double blockedArrivalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BlockedArrivalTime {
      get { return blockedArrivalTime_; }
      set {
        blockedArrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "TardinessMean" field.</summary>
    public const int TardinessMeanFieldNumber = 7;
    private double tardinessMean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TardinessMean {
      get { return tardinessMean_; }
      set {
        tardinessMean_ = value;
      }
    }

    /// <summary>Field number for the "BufferUtilizationMean" field.</summary>
    public const int BufferUtilizationMeanFieldNumber = 8;
    private double bufferUtilizationMean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BufferUtilizationMean {
      get { return bufferUtilizationMean_; }
      set {
        bufferUtilizationMean_ = value;
      }
    }

    /// <summary>Field number for the "CraneUtilizationMean" field.</summary>
    public const int CraneUtilizationMeanFieldNumber = 9;
    private double craneUtilizationMean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CraneUtilizationMean {
      get { return craneUtilizationMean_; }
      set {
        craneUtilizationMean_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Performance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Performance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CraneManipulations != other.CraneManipulations) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ServiceLevelMean, other.ServiceLevelMean)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeadTimeMean, other.LeadTimeMean)) return false;
      if (DeliveredBlocks != other.DeliveredBlocks) return false;
      if (TotalBlocksOnTime != other.TotalBlocksOnTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlockedArrivalTime, other.BlockedArrivalTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TardinessMean, other.TardinessMean)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BufferUtilizationMean, other.BufferUtilizationMean)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CraneUtilizationMean, other.CraneUtilizationMean)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CraneManipulations != 0) hash ^= CraneManipulations.GetHashCode();
      if (ServiceLevelMean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ServiceLevelMean);
      if (LeadTimeMean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeadTimeMean);
      if (DeliveredBlocks != 0) hash ^= DeliveredBlocks.GetHashCode();
      if (TotalBlocksOnTime != 0) hash ^= TotalBlocksOnTime.GetHashCode();
      if (BlockedArrivalTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlockedArrivalTime);
      if (TardinessMean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TardinessMean);
      if (BufferUtilizationMean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BufferUtilizationMean);
      if (CraneUtilizationMean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CraneUtilizationMean);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CraneManipulations != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CraneManipulations);
      }
      if (ServiceLevelMean != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ServiceLevelMean);
      }
      if (LeadTimeMean != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LeadTimeMean);
      }
      if (DeliveredBlocks != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeliveredBlocks);
      }
      if (TotalBlocksOnTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalBlocksOnTime);
      }
      if (BlockedArrivalTime != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(BlockedArrivalTime);
      }
      if (TardinessMean != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(TardinessMean);
      }
      if (BufferUtilizationMean != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(BufferUtilizationMean);
      }
      if (CraneUtilizationMean != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CraneUtilizationMean);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CraneManipulations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CraneManipulations);
      }
      if (ServiceLevelMean != 0D) {
        size += 1 + 8;
      }
      if (LeadTimeMean != 0D) {
        size += 1 + 8;
      }
      if (DeliveredBlocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeliveredBlocks);
      }
      if (TotalBlocksOnTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBlocksOnTime);
      }
      if (BlockedArrivalTime != 0D) {
        size += 1 + 8;
      }
      if (TardinessMean != 0D) {
        size += 1 + 8;
      }
      if (BufferUtilizationMean != 0D) {
        size += 1 + 8;
      }
      if (CraneUtilizationMean != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Performance other) {
      if (other == null) {
        return;
      }
      if (other.CraneManipulations != 0) {
        CraneManipulations = other.CraneManipulations;
      }
      if (other.ServiceLevelMean != 0D) {
        ServiceLevelMean = other.ServiceLevelMean;
      }
      if (other.LeadTimeMean != 0D) {
        LeadTimeMean = other.LeadTimeMean;
      }
      if (other.DeliveredBlocks != 0) {
        DeliveredBlocks = other.DeliveredBlocks;
      }
      if (other.TotalBlocksOnTime != 0) {
        TotalBlocksOnTime = other.TotalBlocksOnTime;
      }
      if (other.BlockedArrivalTime != 0D) {
        BlockedArrivalTime = other.BlockedArrivalTime;
      }
      if (other.TardinessMean != 0D) {
        TardinessMean = other.TardinessMean;
      }
      if (other.BufferUtilizationMean != 0D) {
        BufferUtilizationMean = other.BufferUtilizationMean;
      }
      if (other.CraneUtilizationMean != 0D) {
        CraneUtilizationMean = other.CraneUtilizationMean;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CraneManipulations = input.ReadInt32();
            break;
          }
          case 17: {
            ServiceLevelMean = input.ReadDouble();
            break;
          }
          case 25: {
            LeadTimeMean = input.ReadDouble();
            break;
          }
          case 32: {
            DeliveredBlocks = input.ReadInt32();
            break;
          }
          case 40: {
            TotalBlocksOnTime = input.ReadInt32();
            break;
          }
          case 49: {
            BlockedArrivalTime = input.ReadDouble();
            break;
          }
          case 57: {
            TardinessMean = input.ReadDouble();
            break;
          }
          case 65: {
            BufferUtilizationMean = input.ReadDouble();
            break;
          }
          case 73: {
            CraneUtilizationMean = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Stack : pb::IMessage<Stack> {
    private static readonly pb::MessageParser<Stack> _parser = new pb::MessageParser<Stack>(() => new Stack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stack(Stack other) : this() {
      id_ = other.id_;
      maxHeight_ = other.maxHeight_;
      bottomToTop_ = other.bottomToTop_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stack Clone() {
      return new Stack(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "MaxHeight" field.</summary>
    public const int MaxHeightFieldNumber = 2;
    private int maxHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHeight {
      get { return maxHeight_; }
      set {
        maxHeight_ = value;
      }
    }

    /// <summary>Field number for the "BottomToTop" field.</summary>
    public const int BottomToTopFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DynStacking.DataModel.Block> _repeated_bottomToTop_codec
        = pb::FieldCodec.ForMessage(26, global::DynStacking.DataModel.Block.Parser);
    private readonly pbc::RepeatedField<global::DynStacking.DataModel.Block> bottomToTop_ = new pbc::RepeatedField<global::DynStacking.DataModel.Block>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DynStacking.DataModel.Block> BottomToTop {
      get { return bottomToTop_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MaxHeight != other.MaxHeight) return false;
      if(!bottomToTop_.Equals(other.bottomToTop_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MaxHeight != 0) hash ^= MaxHeight.GetHashCode();
      hash ^= bottomToTop_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MaxHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxHeight);
      }
      bottomToTop_.WriteTo(output, _repeated_bottomToTop_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MaxHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHeight);
      }
      size += bottomToTop_.CalculateSize(_repeated_bottomToTop_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MaxHeight != 0) {
        MaxHeight = other.MaxHeight;
      }
      bottomToTop_.Add(other.bottomToTop_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MaxHeight = input.ReadInt32();
            break;
          }
          case 26: {
            bottomToTop_.AddEntriesFrom(input, _repeated_bottomToTop_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeStamp : pb::IMessage<TimeStamp> {
    private static readonly pb::MessageParser<TimeStamp> _parser = new pb::MessageParser<TimeStamp>(() => new TimeStamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeStamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStamp(TimeStamp other) : this() {
      milliSeconds_ = other.milliSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStamp Clone() {
      return new TimeStamp(this);
    }

    /// <summary>Field number for the "MilliSeconds" field.</summary>
    public const int MilliSecondsFieldNumber = 1;
    private long milliSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MilliSeconds {
      get { return milliSeconds_; }
      set {
        milliSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeStamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeStamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MilliSeconds != other.MilliSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MilliSeconds != 0L) hash ^= MilliSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MilliSeconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MilliSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MilliSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MilliSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeStamp other) {
      if (other == null) {
        return;
      }
      if (other.MilliSeconds != 0L) {
        MilliSeconds = other.MilliSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MilliSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Uncertainties : pb::IMessage<Uncertainties> {
    private static readonly pb::MessageParser<Uncertainties> _parser = new pb::MessageParser<Uncertainties>(() => new Uncertainties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uncertainties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uncertainties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uncertainties(Uncertainties other) : this() {
      arrivalIntervals_ = other.arrivalIntervals_.Clone();
      craneMoveTimes_ = other.craneMoveTimes_.Clone();
      handoverReadyIntervals_ = other.handoverReadyIntervals_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uncertainties Clone() {
      return new Uncertainties(this);
    }

    /// <summary>Field number for the "ArrivalIntervals" field.</summary>
    public const int ArrivalIntervalsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_arrivalIntervals_codec
        = pb::FieldCodec.ForDouble(9);
    private readonly pbc::RepeatedField<double> arrivalIntervals_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ArrivalIntervals {
      get { return arrivalIntervals_; }
    }

    /// <summary>Field number for the "CraneMoveTimes" field.</summary>
    public const int CraneMoveTimesFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_craneMoveTimes_codec
        = pb::FieldCodec.ForDouble(17);
    private readonly pbc::RepeatedField<double> craneMoveTimes_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> CraneMoveTimes {
      get { return craneMoveTimes_; }
    }

    /// <summary>Field number for the "HandoverReadyIntervals" field.</summary>
    public const int HandoverReadyIntervalsFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_handoverReadyIntervals_codec
        = pb::FieldCodec.ForDouble(25);
    private readonly pbc::RepeatedField<double> handoverReadyIntervals_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> HandoverReadyIntervals {
      get { return handoverReadyIntervals_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uncertainties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uncertainties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!arrivalIntervals_.Equals(other.arrivalIntervals_)) return false;
      if(!craneMoveTimes_.Equals(other.craneMoveTimes_)) return false;
      if(!handoverReadyIntervals_.Equals(other.handoverReadyIntervals_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= arrivalIntervals_.GetHashCode();
      hash ^= craneMoveTimes_.GetHashCode();
      hash ^= handoverReadyIntervals_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      arrivalIntervals_.WriteTo(output, _repeated_arrivalIntervals_codec);
      craneMoveTimes_.WriteTo(output, _repeated_craneMoveTimes_codec);
      handoverReadyIntervals_.WriteTo(output, _repeated_handoverReadyIntervals_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += arrivalIntervals_.CalculateSize(_repeated_arrivalIntervals_codec);
      size += craneMoveTimes_.CalculateSize(_repeated_craneMoveTimes_codec);
      size += handoverReadyIntervals_.CalculateSize(_repeated_handoverReadyIntervals_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uncertainties other) {
      if (other == null) {
        return;
      }
      arrivalIntervals_.Add(other.arrivalIntervals_);
      craneMoveTimes_.Add(other.craneMoveTimes_);
      handoverReadyIntervals_.Add(other.handoverReadyIntervals_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            arrivalIntervals_.AddEntriesFrom(input, _repeated_arrivalIntervals_codec);
            break;
          }
          case 18:
          case 17: {
            craneMoveTimes_.AddEntriesFrom(input, _repeated_craneMoveTimes_codec);
            break;
          }
          case 26:
          case 25: {
            handoverReadyIntervals_.AddEntriesFrom(input, _repeated_handoverReadyIntervals_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class World : pb::IMessage<World> {
    private static readonly pb::MessageParser<World> _parser = new pb::MessageParser<World>(() => new World());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<World> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynStacking.DataModel.DataModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public World() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public World(World other) : this() {
      now_ = other.now_ != null ? other.now_.Clone() : null;
      production_ = other.production_ != null ? other.production_.Clone() : null;
      buffers_ = other.buffers_.Clone();
      handover_ = other.handover_ != null ? other.handover_.Clone() : null;
      crane_ = other.crane_ != null ? other.crane_.Clone() : null;
      kPIs_ = other.kPIs_ != null ? other.kPIs_.Clone() : null;
      observationData_ = other.observationData_ != null ? other.observationData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public World Clone() {
      return new World(this);
    }

    /// <summary>Field number for the "Now" field.</summary>
    public const int NowFieldNumber = 1;
    private global::DynStacking.DataModel.TimeStamp now_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.TimeStamp Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    /// <summary>Field number for the "Production" field.</summary>
    public const int ProductionFieldNumber = 2;
    private global::DynStacking.DataModel.Stack production_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.Stack Production {
      get { return production_; }
      set {
        production_ = value;
      }
    }

    /// <summary>Field number for the "Buffers" field.</summary>
    public const int BuffersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DynStacking.DataModel.Stack> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(26, global::DynStacking.DataModel.Stack.Parser);
    private readonly pbc::RepeatedField<global::DynStacking.DataModel.Stack> buffers_ = new pbc::RepeatedField<global::DynStacking.DataModel.Stack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DynStacking.DataModel.Stack> Buffers {
      get { return buffers_; }
    }

    /// <summary>Field number for the "Handover" field.</summary>
    public const int HandoverFieldNumber = 4;
    private global::DynStacking.DataModel.Handover handover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.Handover Handover {
      get { return handover_; }
      set {
        handover_ = value;
      }
    }

    /// <summary>Field number for the "Crane" field.</summary>
    public const int CraneFieldNumber = 5;
    private global::DynStacking.DataModel.Crane crane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.Crane Crane {
      get { return crane_; }
      set {
        crane_ = value;
      }
    }

    /// <summary>Field number for the "KPIs" field.</summary>
    public const int KPIsFieldNumber = 6;
    private global::DynStacking.DataModel.Performance kPIs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.Performance KPIs {
      get { return kPIs_; }
      set {
        kPIs_ = value;
      }
    }

    /// <summary>Field number for the "ObservationData" field.</summary>
    public const int ObservationDataFieldNumber = 7;
    private global::DynStacking.DataModel.Uncertainties observationData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DynStacking.DataModel.Uncertainties ObservationData {
      get { return observationData_; }
      set {
        observationData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as World);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(World other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Now, other.Now)) return false;
      if (!object.Equals(Production, other.Production)) return false;
      if(!buffers_.Equals(other.buffers_)) return false;
      if (!object.Equals(Handover, other.Handover)) return false;
      if (!object.Equals(Crane, other.Crane)) return false;
      if (!object.Equals(KPIs, other.KPIs)) return false;
      if (!object.Equals(ObservationData, other.ObservationData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (now_ != null) hash ^= Now.GetHashCode();
      if (production_ != null) hash ^= Production.GetHashCode();
      hash ^= buffers_.GetHashCode();
      if (handover_ != null) hash ^= Handover.GetHashCode();
      if (crane_ != null) hash ^= Crane.GetHashCode();
      if (kPIs_ != null) hash ^= KPIs.GetHashCode();
      if (observationData_ != null) hash ^= ObservationData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (now_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Now);
      }
      if (production_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Production);
      }
      buffers_.WriteTo(output, _repeated_buffers_codec);
      if (handover_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Handover);
      }
      if (crane_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Crane);
      }
      if (kPIs_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(KPIs);
      }
      if (observationData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ObservationData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (now_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Now);
      }
      if (production_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Production);
      }
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      if (handover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handover);
      }
      if (crane_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crane);
      }
      if (kPIs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KPIs);
      }
      if (observationData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObservationData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(World other) {
      if (other == null) {
        return;
      }
      if (other.now_ != null) {
        if (now_ == null) {
          Now = new global::DynStacking.DataModel.TimeStamp();
        }
        Now.MergeFrom(other.Now);
      }
      if (other.production_ != null) {
        if (production_ == null) {
          Production = new global::DynStacking.DataModel.Stack();
        }
        Production.MergeFrom(other.Production);
      }
      buffers_.Add(other.buffers_);
      if (other.handover_ != null) {
        if (handover_ == null) {
          Handover = new global::DynStacking.DataModel.Handover();
        }
        Handover.MergeFrom(other.Handover);
      }
      if (other.crane_ != null) {
        if (crane_ == null) {
          Crane = new global::DynStacking.DataModel.Crane();
        }
        Crane.MergeFrom(other.Crane);
      }
      if (other.kPIs_ != null) {
        if (kPIs_ == null) {
          KPIs = new global::DynStacking.DataModel.Performance();
        }
        KPIs.MergeFrom(other.KPIs);
      }
      if (other.observationData_ != null) {
        if (observationData_ == null) {
          ObservationData = new global::DynStacking.DataModel.Uncertainties();
        }
        ObservationData.MergeFrom(other.ObservationData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (now_ == null) {
              Now = new global::DynStacking.DataModel.TimeStamp();
            }
            input.ReadMessage(Now);
            break;
          }
          case 18: {
            if (production_ == null) {
              Production = new global::DynStacking.DataModel.Stack();
            }
            input.ReadMessage(Production);
            break;
          }
          case 26: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 34: {
            if (handover_ == null) {
              Handover = new global::DynStacking.DataModel.Handover();
            }
            input.ReadMessage(Handover);
            break;
          }
          case 42: {
            if (crane_ == null) {
              Crane = new global::DynStacking.DataModel.Crane();
            }
            input.ReadMessage(Crane);
            break;
          }
          case 50: {
            if (kPIs_ == null) {
              KPIs = new global::DynStacking.DataModel.Performance();
            }
            input.ReadMessage(KPIs);
            break;
          }
          case 58: {
            if (observationData_ == null) {
              ObservationData = new global::DynStacking.DataModel.Uncertainties();
            }
            input.ReadMessage(ObservationData);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
